kable_styling(position = "left", full_width = FALSE)
knitr::opts_chunk$set(echo = TRUE)
# Installation de package si n'existe pas
if (!require(readr) ) {install.packages("readr" , repos = "http://cran.us.r-project.org")}
# Chargement de package
library(readr)
library(knitr)
# Importation de donneés depuis fichier excel
# Cette fichier est importé depuis kaggle
# Comporte les donneés de championnat d'Espagne de football de première division
LaLigaPlayers <- read_csv("C:/Users/21655/Desktop/Projet_DS_Yassine/Data/S2324-laliga-players.csv")
# Dimension de notre dataset
dim(LaLigaPlayers) # 3615 lignes , 150 columns
# Affichage de dooneés
kable(head(LaLigaPlayers[,7:13],6),caption = "LaLiga - sample 6 lignes avec 7 columns")
# Chargement de package pour extraire des données depuis l'internet
library(rvest)
# Le lien d’où allons extraire les informations d'une equipe
# Dans ce cas nous avons choisis l'equipe "Real Madrid"
link <-"https://fbref.com/fr/equipes/53a2f082/2023-2024/Statistiques-Real-Madrid"
page <- read_html(link,header=FALSE)
# Nous avons extrait les tables dans cette page
tables <- page %>%
html_nodes("table") %>%
html_table(fill = TRUE)
# Mettre le deuxième tableau dans notre dataset MatchesRM
if(length(tables)>0){
MatchesRM <- tables[[2]]
dim(MatchesRM)  # 55 lignes , 20 columns
kable(head(MatchesRM[,4:13],6),caption="Matches-RM")
} else {
print("aucun table trouveé")
}
# Suppression des colonnes inutiles dans notre jeu de données
# Nous avons déjà supprimér plusieurs colonnes mais nous venons de laisser celles-ci comme exemple de code
LaLigaPlayers <- subset(LaLigaPlayers,select=-c(height, weight, competition ,player.url ,id ,date_of_birth , country ,place_of_birth , slug ,nickname, firstname, lastname, gender, international, throw_ins_to_opposition_player ,throw_ins_to_own_player ,twitter ,instagram ,team.shortname ,team.foundation ,team.shield ,photo ,stadium ,stadium.image ,drops ,games_played ,goalkeeper_smother ,hit_woodwork ,index ,last_player_tackle ,left_foot_goals ,leftside_passes ,other_goals ,punches ,right_foot_goals ,rightside_passes ,shots_off_target_inc_woodwork ,team_games_played ,handballs_conceded ) )
# Conserver seulement les joueurs de Real Madrid à partir de dataset LaLigaPlayers
library(kableExtra)
RealMadridPlayers <- subset(LaLigaPlayers, LaLigaPlayers$team=="Real Madrid")
RealMadridPlayers <- subset(RealMadridPlayers,select = -c(team))
kable(
head( RealMadridPlayers[,1:9],6 ),
caption = "Tableau des Données 1er 6 lignes avec 9 colonnes",
format = "latex",
booktabs = TRUE,  # Ajouter des traits horizontaux propres
align = "c"    # Centrer les colonnes
) %>%
kable_styling(
latex_options = c("striped", "hold_position"),  # Style rayé et position maintenue
full_width = TRUE,  # Table non étendue à la largeur complète
font_size = 8
)
#kable(head (RealMadridPlayers[,1:9],6),caption = " Joueurs RM")
print( paste("Dimension : ", dim(RealMadridPlayers)) ) # 175 lignes , 112 columns
print( paste("Nombre de lignes : ",nrow(RealMadridPlayers)))  # nous avons 175 lignes
# Nombres duplicates
num_duplicates <- sum(duplicated(RealMadridPlayers))
# Identifer les lignes dupliquées.
duplicated_RM_Players <- RealMadridPlayers[duplicated(RealMadridPlayers),]
# les enregistrements dupliquées = 140
head(duplicated_RM_Players, n =15)
# Les lignes nettoyées sur lesquelles nous allons travailler
normaldt_RM_Players <- RealMadridPlayers[!duplicated(RealMadridPlayers),]
kable(head(normaldt_RM_Players[,1:9],6),align = "l")
GoalKeepers <- subset(normaldt_RM_Players,normaldt_RM_Players$position=="Goalkeeper")
# Les noms de gardiens
# Load kableExtra
library(kableExtra)
kable(head(GoalKeepers[,1:5]), align = "l", caption = "Goalkeepers") %>%
kable_styling(position = "left", full_width = FALSE)
#
Defenders <- subset(normaldt_RM_Players,normaldt_RM_Players$position=="Defender")
# Les noms de defenders
kable(head(Defenders[,1:5]), align = "l", caption = "Defenders Table") %>%
kable_styling(position = "left", full_width = FALSE)
#
Midfielders <- subset(normaldt_RM_Players,normaldt_RM_Players$position=="Midfielder")
# Les noms de Midfielders
kable(head(Midfielders[,1:5]), align = "l", caption = "Midfielders Table") %>%
kable_styling(position = "left", full_width = FALSE)
#
Forwards <- subset(normaldt_RM_Players,normaldt_RM_Players$position=="Forward")
# Les noms de Midfielders
kable(head(Forwards[,1:5]), align = "l", caption = "Forwards Table") %>%
kable_styling(position = "left", full_width = FALSE)
print("Dimension Avant suppression")
dim(GoalKeepers)
remove_na_columns <- function(GoalKeepers) {
# check kol columns is na lkol ou non
GoalKeepers <- GoalKeepers[, colSums(is.na(GoalKeepers)) < nrow(GoalKeepers)]
return(GoalKeepers)
}
GoalKeepers<- remove_na_columns(GoalKeepers)
print("Dimension Aprés suppression")
dim(GoalKeepers)
print("Dimension Avant suppression")
dim(GoalKeepers)
delete_columns_if_exists<- function(GoalKeepers, columnsToDelete) {
# si existe column -> put it in exisiting columns
existing_columns <- columnsToDelete[columnsToDelete %in% colnames(GoalKeepers)] # explicitement
# Suppression les colonnes souhaité
GoalKeepers <- GoalKeepers[, !(colnames(GoalKeepers) %in% existing_columns)]
return(GoalKeepers)
}
columnsToDelete <- c("position","shirt_number", "backward_passes", "goal_assists", "goal_kicks", "goals_from_inside_box", "headed_goals", "home_goals", "offsides", "open_play_passes", "overruns", "putthrough_blocked_distribution", "putthrough_blocked_distribution_won", "recoveries", "red_cards_2nd_yellow", "second_goal_assists", "shots_on_target_inc_goals", "straight_red_cards", "substitute_off", "substitute_on", "successful_crosses_corners", "successful_crosses_open_play", "successful_dribbles", "successful_launches", "successful_open_play_passes", "successful_passes_opposition_half", "successful_passes_own_half", "successful_short_passes", "tackles_lost",
"through_balls", "times_tackled", "total_fouls_conceded", "total_fouls_won", "total_losses_of_possession", "total_passes", "total_successful_passes_excl_crosses_corners", "total_tackles", "total_touches_in_opposition_box", "total_unsuccessful_passes_excl_crosses_corners", "touches", "unsuccessful_corners_into_box", "unsuccessful_crosses_corners", "unsuccessful_crosses_open_play", "unsuccessful_dribbles", "unsuccessful_launches", "unsuccessful_layoffs", "unsuccessful_passes_opposition_half", "unsuccessful_passes_own_half", "winning_goal", "yellow_cards"
)
GoalKeepers <- delete_columns_if_exists(GoalKeepers, columnsToDelete)
print("Dimension Aprés suppression")
dim(GoalKeepers)
print("Dimension Avant suppression")
dim(Defenders)
remove_na_columns <- function(Defenders) {
# check kol columns is na lkol ou non
Defenders <- Defenders[, colSums(is.na(Defenders)) < nrow(Defenders)]
return(Defenders)
}
Defenders<- remove_na_columns(Defenders)
print("Dimension Aprés suppression")
dim(Defenders)
print("Dimension Avant suppression")
dim(Defenders)
delete_columns_if_exists<- function(Defenders, columnsToDelete) {
# si existe column -> put it in exisiting columns
existing_columns <- columnsToDelete[columnsToDelete %in% colnames(Defenders)] # explicitement
# Suppression les colonnes souhaité
Defenders <- Defenders[, !(colnames(Defenders) %in% existing_columns)]
return(Defenders)
}
columnsToDelete <- c("position","shirt_number","away_goals", "backward_passes", "foul_attempted_tackle", "gk_successful_distribution",
"goal_assists", "goal_kicks", "goals_conceded_inside_box", "goals_conceded_outside_box",
"goals_from_inside_box", "goals_from_outside_box", "headed_goals", "home_goals",
"key_passes_attempt_assists", "offsides", "open_play_passes", "overruns",
"penalty_goals_conceded", "putthrough_blocked_distribution", "putthrough_blocked_distribution_won",
"recoveries", "red_cards_2nd_yellow", "second_goal_assists", "shots_on_target_inc_goals",
"straight_red_cards", "substitute_off", "substitute_on", "successful_corners_into_box",
"successful_crosses_corners", "successful_crosses_open_play", "successful_dribbles",
"successful_launches", "successful_layoffs", "successful_long_passes", "successful_open_play_passes",
"successful_passes_opposition_half", "through_balls","yellow_cards")
Defenders <- delete_columns_if_exists(Defenders, columnsToDelete)
print("Dimension Aprés suppression")
dim(Defenders)
print("Dimension Avant suppression")
dim(Midfielders)
remove_na_columns <- function(Midfielders) {
# check kol columns is na lkol ou non
Midfielders <- Midfielders[, colSums(is.na(Midfielders)) < nrow(Midfielders)]
return(Midfielders)
}
Midfielders<- remove_na_columns(Midfielders)
print("Dimension Aprés suppression")
dim(Midfielders)
print("Dimension Avant suppression")
dim(Midfielders)
delete_columns_if_exists<- function(Midfielders, columnsToDelete) {
# si existe column -> put it in exisiting columns
existing_columns <- columnsToDelete[columnsToDelete %in% colnames(Midfielders)] # explicitement
# Suppression les colonnes souhaité
Midfielders <- Midfielders[, !(colnames(Midfielders) %in% existing_columns)]
return(Midfielders)
}
columnsToDelete <- c("position","shirt_number","aerial_duels", "aerial_duels_lost", "aerial_duels_won", "clean_sheets", "goal_kicks", "goals_conceded", "goals_conceded_inside_box", "goals_conceded_outside_box", "goals_from_inside_box", "goals_from_outside_box", "headed_goals", "home_goals", "offsides", "overruns", "penalties_conceded", "penalty_goals_conceded", "putthrough_blocked_distribution", "putthrough_blocked_distribution_won", "second_goal_assists", "substitute_off", "substitute_on", "tackles_lost", "total_clearances", "total_fouls_conceded", "total_losses_of_possession", "total_red_cards", "total_touches_in_opposition_box", "total_unsuccessful_passes_excl_crosses_corners", "unsuccessful_corners_into_box", "unsuccessful_crosses_corners", "unsuccessful_crosses_open_play", "unsuccessful_dribbles", "unsuccessful_launches", "unsuccessful_layoffs", "unsuccessful_long_passes", "unsuccessful_passes_opposition_half", "unsuccessful_passes_own_half", "unsuccessful_short_passes", "gk_successful_distribution", "yellow_cards", "straight_red_cards", "away_goals", "penalties_taken", "penalty_goals")
Midfielders <- delete_columns_if_exists(Midfielders, columnsToDelete)
print("Dimension Aprés suppression")
dim(Midfielders)
print("Dimension Avant suppression")
dim(Forwards)
remove_na_columns <- function(Forwards) {
# check kol columns is na lkol ou non
Forwards <- Forwards[, colSums(is.na(Forwards)) < nrow(Forwards)]
return(Forwards)
}
Forwards<- remove_na_columns(Forwards)
print("Dimension Aprés suppression")
dim(Forwards)
print("Dimension Avant suppression")
dim(Forwards)
delete_columns_if_exists<- function(Forwards, columnsToDelete) {
# si existe column -> put it in exisiting columns
existing_columns <- columnsToDelete[columnsToDelete %in% colnames(Forwards)] # explicitement
# Suppression les colonnes souhaité
Forwards <- Forwards[, !(colnames(Forwards) %in% existing_columns)]
return(Forwards)
}
columnsToDelete <- c("position","shirt_number","backward_passes", "blocked_shots", "blocks", "corners_taken_incl_short_corners",
"corners_won", "duels", "duels_lost", "forward_passes", "foul_attempted_tackle",
"foul_won_penalty", "goals_conceded", "goals_conceded_inside_box",
"goals_conceded_outside_box", "goals_from_inside_box", "goals_from_outside_box",
"ground_duels", "ground_duels_lost", "ground_duels_won", "interceptions",
"key_passes_attempt_assists", "open_play_passes", "overruns",
"penalties_off_target", "penalty_goals_conceded", "putthrough_blocked_distribution",
"putthrough_blocked_distribution_won", "recoveries", "second_goal_assists",
"successful_corners_into_box", "successful_crosses_corners", "successful_crosses_open_play",
"successful_dribbles", "successful_launches", "successful_layoffs", "successful_long_passes",
"successful_open_play_passes", "successful_passes_opposition_half",
"successful_passes_own_half", "successful_short_passes", "tackles_lost",
"through_balls", "times_tackled", "total_clearances", "total_fouls_conceded",
"total_fouls_won", "total_losses_of_possession", "total_successful_passes_excl_crosses_corners",
"total_tackles", "total_touches_in_opposition_box",
"total_unsuccessful_passes_excl_crosses_corners", "unsuccessful_corners_into_box",
"unsuccessful_crosses_corners", "unsuccessful_crosses_open_play", "unsuccessful_dribbles",
"unsuccessful_launches", "unsuccessful_layoffs", "unsuccessful_long_passes",
"unsuccessful_passes_opposition_half", "unsuccessful_passes_own_half", "unsuccessful_short_passes"
)
Forwards <- delete_columns_if_exists(Forwards, columnsToDelete)
print("Dimension Aprés suppression")
dim(Forwards)
MatchesRM <- subset(MatchesRM, MatchesRM$Comp=="La Liga")
delete_columns<- function(MatchesRM, columnsToDelete) {
# si existe column -> put it in exisiting columns
existing_columns <- columnsToDelete[columnsToDelete %in% colnames(MatchesRM)] # explicitement
# Suppression les colonnes souhaité
MatchesRM <- MatchesRM[, !(colnames(MatchesRM) %in% existing_columns)]
return(MatchesRM)
}
columnsToDelete <- c("Date","Heure","Jour","Arbitre","Rapport de match","Notes","Capitaine")
MatchesRM <- delete_columns_if_exists(MatchesRM, columnsToDelete)
kable(head(MatchesRM[,4:11],6),caption = "Matches Real Madrid")
# Verifier si les variables sont integer ou pas
typeof(MatchesRM$BE)
typeof(MatchesRM$BM)
# Converting BE BM to Int
MatchesRM$BE <- as.integer(MatchesRM$BE)
typeof(MatchesRM$BE)
MatchesRM$BM <- as.integer(MatchesRM$BM)
typeof(MatchesRM$BM)
# Creation les variabels cibles
# Assuming MatchesRM$Resultat contains "V", "D", or "N"
MatchesRM$Target1 <- ifelse(MatchesRM$Résultat == "V", 1,
ifelse(MatchesRM$Résultat == "D", 0,
ifelse(MatchesRM$Résultat == "N", 2,NA) ))
columnsToDelete <- c("Date","Heure","Jour","Arbitre","Rapport de match","Notes","Capitaine","Formation")
columnsToDelete <- c("Date","Heure","Jour","Arbitre","Rapport de match","Notes","Capitaine","Formation","Formation Adverse")
kable(head(MatchesRM[,4:11],6),caption = "Matches Real Madrid")
kable(head(MatchesRM[,4:],6),caption = "Matches Real Madrid")
kable(head(MatchesRM[,4:11],6),caption = "Matches Real Madrid")
kable(head(MatchesRM[,4:15],6),caption = "Matches Real Madrid")
kable(head(MatchesRM[,4:13],6),caption = "Matches Real Madrid")
MatchesRM <- subset(MatchesRM, MatchesRM$Comp=="La Liga")
delete_columns<- function(MatchesRM, columnsToDelete) {
# si existe column -> put it in exisiting columns
existing_columns <- columnsToDelete[columnsToDelete %in% colnames(MatchesRM)] # explicitement
# Suppression les colonnes souhaité
MatchesRM <- MatchesRM[, !(colnames(MatchesRM) %in% existing_columns)]
return(MatchesRM)
}
columnsToDelete <- c("Date","Heure","Jour","Arbitre","Rapport de match","Notes","Capitaine","Formation","Formation Adverse")
MatchesRM <- delete_columns_if_exists(MatchesRM, columnsToDelete)
# Verifier si les variables sont integer ou pas
typeof(MatchesRM$BE)
typeof(MatchesRM$BM)
# Converting BE BM to Int
MatchesRM$BE <- as.integer(MatchesRM$BE)
typeof(MatchesRM$BE)
MatchesRM$BM <- as.integer(MatchesRM$BM)
typeof(MatchesRM$BM)
# Creation les variabels cibles
# Assuming MatchesRM$Resultat contains "V", "D", or "N"
MatchesRM$Target1 <- ifelse(MatchesRM$Résultat == "V", 1,
ifelse(MatchesRM$Résultat == "D", 0,
ifelse(MatchesRM$Résultat == "N", 2,NA) ))
kable(head(MatchesRM[,4:13],6),caption = "Matches Real Madrid")
knitr::opts_chunk$set(echo = TRUE)
# Installation de package si n'existe pas
if (!require(readr) ) {install.packages("readr" , repos = "http://cran.us.r-project.org")}
# Chargement de package
library(readr)
library(knitr)
# Importation de donneés depuis fichier excel
# Cette fichier est importé depuis kaggle
# Comporte les donneés de championnat d'Espagne de football de première division
LaLigaPlayers <- read_csv("C:/Users/21655/Desktop/Projet_DS_Yassine/Data/S2324-laliga-players.csv")
# Dimension de notre dataset
dim(LaLigaPlayers) # 3615 lignes , 150 columns
# Affichage de dooneés
kable(head(LaLigaPlayers[,7:13],6),caption = "LaLiga - sample 6 lignes avec 7 columns")
# Chargement de package pour extraire des données depuis l'internet
library(rvest)
# Le lien d’où allons extraire les informations d'une equipe
# Dans ce cas nous avons choisis l'equipe "Real Madrid"
link <-"https://fbref.com/fr/equipes/53a2f082/2023-2024/Statistiques-Real-Madrid"
page <- read_html(link,header=FALSE)
knitr::opts_chunk$set(echo = TRUE)
# Installation de package si n'existe pas
if (!require(readr) ) {install.packages("readr" , repos = "http://cran.us.r-project.org")}
# Chargement de package
library(readr)
library(knitr)
# Importation de donneés depuis fichier excel
# Cette fichier est importé depuis kaggle
# Comporte les donneés de championnat d'Espagne de football de première division
LaLigaPlayers <- read_csv("C:/Users/21655/Desktop/Projet_DS_Yassine/Data/S2324-laliga-players.csv")
# Dimension de notre dataset
dim(LaLigaPlayers) # 3615 lignes , 150 columns
# Affichage de dooneés
kable(head(LaLigaPlayers[,7:13],6),caption = "LaLiga - sample 6 lignes avec 7 columns")
# Chargement de package pour extraire des données depuis l'internet
library(rvest)
# Le lien d’où allons extraire les informations d'une equipe
# Dans ce cas nous avons choisis l'equipe "Real Madrid"
link <-"https://fbref.com/fr/equipes/53a2f082/2023-2024/Statistiques-Real-Madrid"
page <- read_html(link,header=FALSE)
# Nous avons extrait les tables dans cette page
tables <- page %>%
html_nodes("table") %>%
html_table(fill = TRUE)
# Mettre le deuxième tableau dans notre dataset MatchesRM
if(length(tables)>0){
MatchesRM <- tables[[2]]
dim(MatchesRM)  # 55 lignes , 20 columns
kable(head(MatchesRM[,4:13],6),caption="Matches-RM")
} else {
print("aucun table trouveé")
}
# Suppression des colonnes inutiles dans notre jeu de données
# Nous avons déjà supprimér plusieurs colonnes mais nous venons de laisser celles-ci comme exemple de code
LaLigaPlayers <- subset(LaLigaPlayers,select=-c(height, weight, competition ,player.url ,id ,date_of_birth , country ,place_of_birth , slug ,nickname, firstname, lastname, gender, international, throw_ins_to_opposition_player ,throw_ins_to_own_player ,twitter ,instagram ,team.shortname ,team.foundation ,team.shield ,photo ,stadium ,stadium.image ,drops ,games_played ,goalkeeper_smother ,hit_woodwork ,index ,last_player_tackle ,left_foot_goals ,leftside_passes ,other_goals ,punches ,right_foot_goals ,rightside_passes ,shots_off_target_inc_woodwork ,team_games_played ,handballs_conceded ) )
# Conserver seulement les joueurs de Real Madrid à partir de dataset LaLigaPlayers
library(kableExtra)
RealMadridPlayers <- subset(LaLigaPlayers, LaLigaPlayers$team=="Real Madrid")
RealMadridPlayers <- subset(RealMadridPlayers,select = -c(team))
kable(
head( RealMadridPlayers[,1:9],6 ),
caption = "Tableau des Données 1er 6 lignes avec 9 colonnes",
format = "latex",
booktabs = TRUE,  # Ajouter des traits horizontaux propres
align = "c"    # Centrer les colonnes
) %>%
kable_styling(
latex_options = c("striped", "hold_position"),  # Style rayé et position maintenue
full_width = TRUE,  # Table non étendue à la largeur complète
font_size = 8
)
#kable(head (RealMadridPlayers[,1:9],6),caption = " Joueurs RM")
print( paste("Dimension : ", dim(RealMadridPlayers)) ) # 175 lignes , 112 columns
print( paste("Nombre de lignes : ",nrow(RealMadridPlayers)))  # nous avons 175 lignes
# Nombres duplicates
num_duplicates <- sum(duplicated(RealMadridPlayers))
# Identifer les lignes dupliquées.
duplicated_RM_Players <- RealMadridPlayers[duplicated(RealMadridPlayers),]
# les enregistrements dupliquées = 140
head(duplicated_RM_Players, n =15)
# Les lignes nettoyées sur lesquelles nous allons travailler
normaldt_RM_Players <- RealMadridPlayers[!duplicated(RealMadridPlayers),]
kable(head(normaldt_RM_Players[,1:9],6),align = "l")
GoalKeepers <- subset(normaldt_RM_Players,normaldt_RM_Players$position=="Goalkeeper")
# Les noms de gardiens
# Load kableExtra
library(kableExtra)
kable(head(GoalKeepers[,1:5]), align = "l", caption = "Goalkeepers") %>%
kable_styling(position = "left", full_width = FALSE)
#
Defenders <- subset(normaldt_RM_Players,normaldt_RM_Players$position=="Defender")
# Les noms de defenders
kable(head(Defenders[,1:5]), align = "l", caption = "Defenders Table") %>%
kable_styling(position = "left", full_width = FALSE)
#
Midfielders <- subset(normaldt_RM_Players,normaldt_RM_Players$position=="Midfielder")
# Les noms de Midfielders
kable(head(Midfielders[,1:5]), align = "l", caption = "Midfielders Table") %>%
kable_styling(position = "left", full_width = FALSE)
#
Forwards <- subset(normaldt_RM_Players,normaldt_RM_Players$position=="Forward")
# Les noms de Midfielders
kable(head(Forwards[,1:5]), align = "l", caption = "Forwards Table") %>%
kable_styling(position = "left", full_width = FALSE)
print("Dimension Avant suppression")
dim(GoalKeepers)
remove_na_columns <- function(GoalKeepers) {
# check kol columns is na lkol ou non
GoalKeepers <- GoalKeepers[, colSums(is.na(GoalKeepers)) < nrow(GoalKeepers)]
return(GoalKeepers)
}
GoalKeepers<- remove_na_columns(GoalKeepers)
print("Dimension Aprés suppression")
dim(GoalKeepers)
print("Dimension Avant suppression")
dim(GoalKeepers)
delete_columns_if_exists<- function(GoalKeepers, columnsToDelete) {
# si existe column -> put it in exisiting columns
existing_columns <- columnsToDelete[columnsToDelete %in% colnames(GoalKeepers)] # explicitement
# Suppression les colonnes souhaité
GoalKeepers <- GoalKeepers[, !(colnames(GoalKeepers) %in% existing_columns)]
return(GoalKeepers)
}
columnsToDelete <- c("position","shirt_number", "backward_passes", "goal_assists", "goal_kicks", "goals_from_inside_box", "headed_goals", "home_goals", "offsides", "open_play_passes", "overruns", "putthrough_blocked_distribution", "putthrough_blocked_distribution_won", "recoveries", "red_cards_2nd_yellow", "second_goal_assists", "shots_on_target_inc_goals", "straight_red_cards", "substitute_off", "substitute_on", "successful_crosses_corners", "successful_crosses_open_play", "successful_dribbles", "successful_launches", "successful_open_play_passes", "successful_passes_opposition_half", "successful_passes_own_half", "successful_short_passes", "tackles_lost",
"through_balls", "times_tackled", "total_fouls_conceded", "total_fouls_won", "total_losses_of_possession", "total_passes", "total_successful_passes_excl_crosses_corners", "total_tackles", "total_touches_in_opposition_box", "total_unsuccessful_passes_excl_crosses_corners", "touches", "unsuccessful_corners_into_box", "unsuccessful_crosses_corners", "unsuccessful_crosses_open_play", "unsuccessful_dribbles", "unsuccessful_launches", "unsuccessful_layoffs", "unsuccessful_passes_opposition_half", "unsuccessful_passes_own_half", "winning_goal", "yellow_cards"
)
GoalKeepers <- delete_columns_if_exists(GoalKeepers, columnsToDelete)
print("Dimension Aprés suppression")
dim(GoalKeepers)
print("Dimension Avant suppression")
dim(Defenders)
remove_na_columns <- function(Defenders) {
# check kol columns is na lkol ou non
Defenders <- Defenders[, colSums(is.na(Defenders)) < nrow(Defenders)]
return(Defenders)
}
Defenders<- remove_na_columns(Defenders)
print("Dimension Aprés suppression")
dim(Defenders)
print("Dimension Avant suppression")
dim(Defenders)
delete_columns_if_exists<- function(Defenders, columnsToDelete) {
# si existe column -> put it in exisiting columns
existing_columns <- columnsToDelete[columnsToDelete %in% colnames(Defenders)] # explicitement
# Suppression les colonnes souhaité
Defenders <- Defenders[, !(colnames(Defenders) %in% existing_columns)]
return(Defenders)
}
columnsToDelete <- c("position","shirt_number","away_goals", "backward_passes", "foul_attempted_tackle", "gk_successful_distribution",
"goal_assists", "goal_kicks", "goals_conceded_inside_box", "goals_conceded_outside_box",
"goals_from_inside_box", "goals_from_outside_box", "headed_goals", "home_goals",
"key_passes_attempt_assists", "offsides", "open_play_passes", "overruns",
"penalty_goals_conceded", "putthrough_blocked_distribution", "putthrough_blocked_distribution_won",
"recoveries", "red_cards_2nd_yellow", "second_goal_assists", "shots_on_target_inc_goals",
"straight_red_cards", "substitute_off", "substitute_on", "successful_corners_into_box",
"successful_crosses_corners", "successful_crosses_open_play", "successful_dribbles",
"successful_launches", "successful_layoffs", "successful_long_passes", "successful_open_play_passes",
"successful_passes_opposition_half", "through_balls","yellow_cards")
Defenders <- delete_columns_if_exists(Defenders, columnsToDelete)
print("Dimension Aprés suppression")
dim(Defenders)
print("Dimension Avant suppression")
dim(Midfielders)
remove_na_columns <- function(Midfielders) {
# check kol columns is na lkol ou non
Midfielders <- Midfielders[, colSums(is.na(Midfielders)) < nrow(Midfielders)]
return(Midfielders)
}
Midfielders<- remove_na_columns(Midfielders)
print("Dimension Aprés suppression")
dim(Midfielders)
print("Dimension Avant suppression")
dim(Midfielders)
delete_columns_if_exists<- function(Midfielders, columnsToDelete) {
# si existe column -> put it in exisiting columns
existing_columns <- columnsToDelete[columnsToDelete %in% colnames(Midfielders)] # explicitement
# Suppression les colonnes souhaité
Midfielders <- Midfielders[, !(colnames(Midfielders) %in% existing_columns)]
return(Midfielders)
}
columnsToDelete <- c("position","shirt_number","aerial_duels", "aerial_duels_lost", "aerial_duels_won", "clean_sheets", "goal_kicks", "goals_conceded", "goals_conceded_inside_box", "goals_conceded_outside_box", "goals_from_inside_box", "goals_from_outside_box", "headed_goals", "home_goals", "offsides", "overruns", "penalties_conceded", "penalty_goals_conceded", "putthrough_blocked_distribution", "putthrough_blocked_distribution_won", "second_goal_assists", "substitute_off", "substitute_on", "tackles_lost", "total_clearances", "total_fouls_conceded", "total_losses_of_possession", "total_red_cards", "total_touches_in_opposition_box", "total_unsuccessful_passes_excl_crosses_corners", "unsuccessful_corners_into_box", "unsuccessful_crosses_corners", "unsuccessful_crosses_open_play", "unsuccessful_dribbles", "unsuccessful_launches", "unsuccessful_layoffs", "unsuccessful_long_passes", "unsuccessful_passes_opposition_half", "unsuccessful_passes_own_half", "unsuccessful_short_passes", "gk_successful_distribution", "yellow_cards", "straight_red_cards", "away_goals", "penalties_taken", "penalty_goals")
Midfielders <- delete_columns_if_exists(Midfielders, columnsToDelete)
print("Dimension Aprés suppression")
dim(Midfielders)
print("Dimension Avant suppression")
dim(Forwards)
remove_na_columns <- function(Forwards) {
# check kol columns is na lkol ou non
Forwards <- Forwards[, colSums(is.na(Forwards)) < nrow(Forwards)]
return(Forwards)
}
Forwards<- remove_na_columns(Forwards)
print("Dimension Aprés suppression")
dim(Forwards)
print("Dimension Avant suppression")
dim(Forwards)
delete_columns_if_exists<- function(Forwards, columnsToDelete) {
# si existe column -> put it in exisiting columns
existing_columns <- columnsToDelete[columnsToDelete %in% colnames(Forwards)] # explicitement
# Suppression les colonnes souhaité
Forwards <- Forwards[, !(colnames(Forwards) %in% existing_columns)]
return(Forwards)
}
columnsToDelete <- c("position","shirt_number","backward_passes", "blocked_shots", "blocks", "corners_taken_incl_short_corners",
"corners_won", "duels", "duels_lost", "forward_passes", "foul_attempted_tackle",
"foul_won_penalty", "goals_conceded", "goals_conceded_inside_box",
"goals_conceded_outside_box", "goals_from_inside_box", "goals_from_outside_box",
"ground_duels", "ground_duels_lost", "ground_duels_won", "interceptions",
"key_passes_attempt_assists", "open_play_passes", "overruns",
"penalties_off_target", "penalty_goals_conceded", "putthrough_blocked_distribution",
"putthrough_blocked_distribution_won", "recoveries", "second_goal_assists",
"successful_corners_into_box", "successful_crosses_corners", "successful_crosses_open_play",
"successful_dribbles", "successful_launches", "successful_layoffs", "successful_long_passes",
"successful_open_play_passes", "successful_passes_opposition_half",
"successful_passes_own_half", "successful_short_passes", "tackles_lost",
"through_balls", "times_tackled", "total_clearances", "total_fouls_conceded",
"total_fouls_won", "total_losses_of_possession", "total_successful_passes_excl_crosses_corners",
"total_tackles", "total_touches_in_opposition_box",
"total_unsuccessful_passes_excl_crosses_corners", "unsuccessful_corners_into_box",
"unsuccessful_crosses_corners", "unsuccessful_crosses_open_play", "unsuccessful_dribbles",
"unsuccessful_launches", "unsuccessful_layoffs", "unsuccessful_long_passes",
"unsuccessful_passes_opposition_half", "unsuccessful_passes_own_half", "unsuccessful_short_passes"
)
Forwards <- delete_columns_if_exists(Forwards, columnsToDelete)
print("Dimension Aprés suppression")
dim(Forwards)
MatchesRM <- subset(MatchesRM, MatchesRM$Comp=="La Liga")
delete_columns<- function(MatchesRM, columnsToDelete) {
# si existe column -> put it in exisiting columns
existing_columns <- columnsToDelete[columnsToDelete %in% colnames(MatchesRM)] # explicitement
# Suppression les colonnes souhaité
MatchesRM <- MatchesRM[, !(colnames(MatchesRM) %in% existing_columns)]
return(MatchesRM)
}
columnsToDelete <- c("Date","Heure","Jour","Arbitre","Rapport de match","Notes","Capitaine","Formation","Formation Adverse")
MatchesRM <- delete_columns_if_exists(MatchesRM, columnsToDelete)
# Verifier si les variables sont integer ou pas
typeof(MatchesRM$BE)
typeof(MatchesRM$BM)
# Converting BE BM to Int
MatchesRM$BE <- as.integer(MatchesRM$BE)
typeof(MatchesRM$BE)
MatchesRM$BM <- as.integer(MatchesRM$BM)
typeof(MatchesRM$BM)
# Creation les variabels cibles
# Assuming MatchesRM$Resultat contains "V", "D", or "N"
MatchesRM$Target1 <- ifelse(MatchesRM$Résultat == "V", 1,
ifelse(MatchesRM$Résultat == "D", 0,
ifelse(MatchesRM$Résultat == "N", 2,NA) ))
kable(head(MatchesRM[,4:13],6),caption = "Matches Real Madrid")
