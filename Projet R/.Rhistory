delete_columns_if_exists<- function(Defenders, columnsToDelete) {
# si existe column -> put it in exisiting columns
existing_columns <- columnsToDelete[columnsToDelete %in% colnames(Defenders)] # explicitement
# Suppression les colonnes souhaité
Defenders <- Defenders[, !(colnames(Defenders) %in% existing_columns)]
return(Defenders)
}
columnsToDelete <- c("position","shirt_number","away_goals", "backward_passes", "foul_attempted_tackle", "gk_successful_distribution",
"goal_assists", "goal_kicks", "goals_conceded_inside_box", "goals_conceded_outside_box",
"goals_from_inside_box", "goals_from_outside_box", "headed_goals", "home_goals",
"key_passes_attempt_assists", "offsides", "open_play_passes", "overruns",
"penalty_goals_conceded", "putthrough_blocked_distribution", "putthrough_blocked_distribution_won",
"recoveries", "red_cards_2nd_yellow", "second_goal_assists", "shots_on_target_inc_goals",
"straight_red_cards", "substitute_off", "substitute_on", "successful_corners_into_box",
"successful_crosses_corners", "successful_crosses_open_play", "successful_dribbles",
"successful_launches", "successful_layoffs", "successful_long_passes", "successful_open_play_passes",
"successful_passes_opposition_half", "through_balls","yellow_cards", "aerial_duels","duels", "aerial_duels_lost", "aerial_duels_won", "assists_intentional", "attempts_from_set_pieces", "blocked_shots", "corners_taken_incl_short_corners", "corners_won", "duel", "duels_lost", "duels_won", "forward_passes", "ground_duels_lost","ground_duels", "ground_duels_won", "starts", "successful_passes_own_half", "successful_short_passes", "tackles_lost", "tackles_won", "time_played", "times_tackled", "total_clearances", "total_fouls_conceded", "total_fouls_won", "total_losses_of_possession", "total_passes", "total_red_cards", "total_shots", "total_successful_passes_excl_crosses_corners", "total_tackles", "total_touches_in_opposition_box", "total_unsuccessful_passes_excl_crosses_corners", "touches", "unsuccessful_corners_into_box", "unsuccessful_crosses_corners", "unsuccessful_crosses_open_play", "unsuccessful_dribbles", "unsuccessful_launches", "unsuccessful_layoffs", "unsuccessful_long_passes" , "unsuccessful_passes_opposition_half", "unsuccessful_passes_own_half", "unsuccessful_short_passes", "winning_goal"
)
Defenders <- delete_columns_if_exists(Defenders, columnsToDelete)
print("Dimension Aprés suppression")
dim(Defenders)
print("Dimension Avant suppression")
dim(Midfielders)
remove_na_columns <- function(Midfielders) {
# check kol columns is na lkol ou non
Midfielders <- Midfielders[, colSums(is.na(Midfielders)) < nrow(Midfielders)]
return(Midfielders)
}
Midfielders<- remove_na_columns(Midfielders)
print("Dimension Aprés suppression")
dim(Midfielders)
print("Dimension Avant suppression")
dim(Midfielders)
delete_columns_if_exists<- function(Midfielders, columnsToDelete) {
# si existe column -> put it in exisiting columns
existing_columns <- columnsToDelete[columnsToDelete %in% colnames(Midfielders)] # explicitement
# Suppression les colonnes souhaité
Midfielders <- Midfielders[, !(colnames(Midfielders) %in% existing_columns)]
return(Midfielders)
}
columnsToDelete <- c("position","shirt_number","aerial_duels", "aerial_duels_lost", "aerial_duels_won", "clean_sheets", "goal_kicks", "goals_conceded", "goals_conceded_inside_box", "goals_conceded_outside_box", "goals_from_inside_box", "goals_from_outside_box", "headed_goals", "home_goals", "offsides", "overruns", "penalties_conceded", "penalty_goals_conceded", "putthrough_blocked_distribution", "putthrough_blocked_distribution_won", "second_goal_assists", "substitute_off", "substitute_on", "tackles_lost", "total_clearances", "total_fouls_conceded", "total_losses_of_possession", "total_red_cards", "total_touches_in_opposition_box", "total_unsuccessful_passes_excl_crosses_corners", "unsuccessful_corners_into_box", "unsuccessful_crosses_corners", "unsuccessful_crosses_open_play", "unsuccessful_launches", "unsuccessful_layoffs", "unsuccessful_long_passes", "unsuccessful_passes_opposition_half", "unsuccessful_passes_own_half", "gk_successful_distribution", "yellow_cards", "straight_red_cards", "away_goals", "penalties_taken", "penalty_goals" , "attempts_from_set_pieces", "backward_passes", "blocked_shots", "blocks", "corners_taken_incl_short_corners", "corners_won", "duels", "duels_won", "forward_passes", "foul_attempted_tackle", "foul_won_penalty", "ground_duels", "ground_duels_lost", "ground_duels_won", "open_play_passes", "recoveries", "shots_on_target_inc_goals", "starts", "successful_corners_into_box", "successful_crosses_corners", "successful_crosses_open_play", "successful_dribbles", "successful_launches", "successful_layoffs", "successful_long_passes", "successful_open_play_passes", "successful_passes_opposition_half", "successful_passes_own_half", "successful_short_passes", "tackles_won", "through_balls", "time_played", "times_tackled", "total_fouls_won", "total_passes", "total_shots", "total_successful_passes_excl_crosses_corners", "total_tackles", "touches", "winning_goal"
)
Midfielders <- delete_columns_if_exists(Midfielders, columnsToDelete)
print("Dimension Aprés suppression")
dim(Midfielders)
print("Dimension Avant suppression")
dim(Forwards)
remove_na_columns <- function(Forwards) {
# check kol columns is na lkol ou non
Forwards <- Forwards[, colSums(is.na(Forwards)) < nrow(Forwards)]
return(Forwards)
}
Forwards<- remove_na_columns(Forwards)
print("Dimension Aprés suppression")
dim(Forwards)
print("Dimension Avant suppression")
dim(Forwards)
delete_columns_if_exists<- function(Forwards, columnsToDelete) {
# si existe column -> put it in exisiting columns
existing_columns <- columnsToDelete[columnsToDelete %in% colnames(Forwards)] # explicitement
# Suppression les colonnes souhaité
Forwards <- Forwards[, !(colnames(Forwards) %in% existing_columns)]
return(Forwards)
}
columnsToDelete <- c("position","shirt_number","backward_passes", "blocked_shots", "blocks", "corners_taken_incl_short_corners",
"corners_won", "duels", "forward_passes", "foul_attempted_tackle",
"foul_won_penalty", "goals_conceded", "goals_conceded_inside_box",
"goals_conceded_outside_box", "goals_from_inside_box", "goals_from_outside_box",
"ground_duels", "ground_duels_lost", "ground_duels_won", "interceptions",
"key_passes_attempt_assists", "open_play_passes",
"penalties_off_target", "penalty_goals_conceded", "putthrough_blocked_distribution",
"putthrough_blocked_distribution_won", "recoveries", "second_goal_assists",
"successful_corners_into_box", "successful_crosses_corners", "successful_crosses_open_play", "successful_launches", "successful_layoffs", "successful_long_passes",
"successful_open_play_passes", "successful_passes_opposition_half",
"successful_passes_own_half", "successful_short_passes", "tackles_lost",
"through_balls", "times_tackled", "total_clearances", "total_fouls_conceded",
"total_fouls_won", "total_losses_of_possession", "total_successful_passes_excl_crosses_corners",
"total_tackles", "total_touches_in_opposition_box",
"total_unsuccessful_passes_excl_crosses_corners", "unsuccessful_corners_into_box",
"unsuccessful_crosses_corners", "unsuccessful_crosses_open_play",
"unsuccessful_launches", "unsuccessful_layoffs", "unsuccessful_long_passes",
"unsuccessful_passes_opposition_half", "unsuccessful_passes_own_half", "unsuccessful_short_passes", "aerial_duels", "aerial_duels_lost", "aerial_duels_won",  "assists_intentional", "attempts_from_set_pieces", "away_goals", "clean_sheets",   "headed_goals", "nome_coals", "onsides", "starts", "substitute_off", "substitute_on", "tackles_won", "time_played", "total_passes", "touches", "winning_goal", "yellow_cards" ,"home_goals"
)
Forwards <- delete_columns_if_exists(Forwards, columnsToDelete)
print("Dimension Aprés suppression")
dim(Forwards)
GoalKeepers[is.na(GoalKeepers)] <- 0
Defenders[is.na(Defenders)] <- 0
Midfielders[is.na(Midfielders)] <- 0
Forwards[is.na(Forwards)] <- 0
MatchesRM <- subset(MatchesRM, MatchesRM$Comp=="La Liga")
delete_columns<- function(MatchesRM, columnsToDelete) {
# si existe column -> put it in exisiting columns
existing_columns <- columnsToDelete[columnsToDelete %in% colnames(MatchesRM)] # explicitement
# Suppression les colonnes souhaité
MatchesRM <- MatchesRM[, !(colnames(MatchesRM) %in% existing_columns)]
return(MatchesRM)
}
columnsToDelete <- c("Date","Heure","Jour","Arbitre","Rapport de match","Notes","Capitaine","Formation","Formation Adverse")
MatchesRM <- delete_columns_if_exists(MatchesRM, columnsToDelete)
# Verifier si les variables sont integer ou pas
typeof(MatchesRM$BE)
typeof(MatchesRM$BM)
# Converting BE BM to Int
MatchesRM$BE <- as.integer(MatchesRM$BE)
typeof(MatchesRM$BE)
MatchesRM$BM <- as.integer(MatchesRM$BM)
typeof(MatchesRM$BM)
# Creation les variabels cibles
# Assuming MatchesRM$Resultat contains "V", "D", or "N"
MatchesRM$Target1 <- ifelse(MatchesRM$Résultat == "V", 1,
ifelse(MatchesRM$Résultat == "D", 0,
ifelse(MatchesRM$Résultat == "N", 2,NA) ))
kable(head(MatchesRM[,4:13],6),caption = "Matches Real Madrid")
GoalKeepers$performance_index_gk <- GoalKeepers$appearances * 0.1 + GoalKeepers$clean_sheets * 0.4 + GoalKeepers$gk_successful_distribution * 0.1 + GoalKeepers$saves_made * 0.15 - GoalKeepers$gk_unsuccessful_distribution * 0.1  - GoalKeepers$goals_conceded * 0.35 - GoalKeepers$penalty_goals_conceded *0.1
library(ggplot2)             # Load the package
ggplot(GoalKeepers, aes(x = appearances, y = performance_index_gk)) +
geom_line(color = "blue", group = 1) +
geom_point(size = 3, aes(color = name)) +  # Use colors for each goalkeeper
geom_text(aes(label = name), vjust = -1, hjust = 0.5, size = 3) +  # Add labels
labs(
title = "Index de performance vs Apparitions",
x = "Nombre d'apparitions",
y = "Index de performance",
color = "Goalkeeper"
) +
theme_minimal()
library(tidyr)
library(dplyr)
GoalKeepers_long <- GoalKeepers %>%
mutate(goals_conceded = -goals_conceded) %>%
pivot_longer(cols = c(clean_sheets, goals_conceded),
names_to = "metric",
values_to = "value")
# Bar plot with goalkeeper names
ggplot(GoalKeepers_long, aes(x = name, y = value, fill = metric)) +
geom_bar(stat = "identity", position = "identity", alpha = 0.7) +
coord_flip() +
scale_fill_manual(
values = c("clean_sheets" = "blue", "goals_conceded" = "red"),
labels = c("Clean Sheets", "Goals Conceded")
) +
labs(
title = "Comparaison des clean sheets et des buts concédés",
x = "Joueur",
y = "Nombre",
fill = "Légende"
) +
geom_text(aes(label = ifelse(value != 0, paste0(value), "")),
position = position_stack(vjust = 0.5), size = 3) +
theme_minimal()
GoalKeepers <- GoalKeepers %>%
mutate(distribution_success_rate =
gk_successful_distribution /
(gk_successful_distribution + gk_unsuccessful_distribution))
ggplot(GoalKeepers, aes(x = gk_unsuccessful_distribution, y = gk_successful_distribution, color = name)) +
geom_point(size = 3) +
geom_text(aes(label = name), vjust = -1, size = 3) +
geom_smooth(method = "lm", se = FALSE, color = "black") +
labs(
title = "Taux de réussite des distributions des gardiens",
x = "Distributions échouées",
y = "Distributions réussies",
color = "Gardien"
) +
theme_minimal()
ggplot(GoalKeepers, aes(x = goals_conceded, y = saves_made, color = name)) +
geom_point(size = 3) +
geom_text(aes(label = name), vjust = -1, size = 3) +
geom_smooth(method = "lm", color = "black", se = FALSE) +
labs(
title = "Saves vs Goals Conceded",
x = "Goals Conceded",
y = "Saves Made",
color = "Gardien"
) +
theme_minimal()
clustering_data <- GoalKeepers %>%
select(performance_index_gk) %>%
scale()
# K-means clustering
set.seed(123)
kmeans_result <- kmeans(clustering_data, centers = 3, nstart = 20)
GoalKeepers$cluster <- as.factor(kmeans_result$cluster)
# Visualization
ggplot(GoalKeepers, aes(x = saves_made, y = goals_conceded, color = cluster)) +
geom_point(size = 4) +
geom_text(aes(label = name), vjust = -1, size = 3) +
labs(
title = "Clustering des gardiens de but en fonction de leurs performances",
x = "Saves Made",
y = "Goals Conceded",
color = "Cluster"
) +
theme_minimal()
model <- lm(performance_index_gk ~ appearances + clean_sheets + saves_made, data = GoalKeepers)
#summary(model)
GoalKeepers$predicted_index <- predict(model, GoalKeepers)
ggplot(GoalKeepers, aes(x = performance_index_gk, y = predicted_index)) +
geom_point() +
geom_abline(slope = 1, intercept = 0, color = "red") +
labs(
title = "Comparaison entre l'index réel et prédit",
x = "Index réel",
y = "Index prédit"
) +
theme_minimal()
Defenders$performance_index_def <-
Defenders$appearances * 0.1 +
Defenders$blocks * 0.2 +
Defenders$clean_sheets * 0.3 +
Defenders$clearances_off_the_line * 0.2 +
Defenders$goals * 0.25 -
Defenders$goals_conceded * 0.35 -
Defenders$own_goal_scored * 0.5 +
Defenders$interceptions * 0.2
ggplot(Defenders, aes(x = reorder(name, -performance_index_def), y = performance_index_def, fill = name)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(
title = "Classement des défenseurs par index de performance",
x = "Défenseur",
y = "Index de performance",
fill = "Défenseur"
) +
theme_minimal()
Defenders$clean_sheet_ratio <- Defenders$clean_sheets / (Defenders$goals_conceded + 1)  # Add 1 to avoid division by zero
ggplot(Defenders, aes(x = reorder(name, -clean_sheet_ratio), y = clean_sheet_ratio, fill = name)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(
title = "Ratio clean sheets / goals concédés",
x = "Défenseur",
y = "Ratio",
fill = "Défenseur"
) +
theme_minimal()
ggplot(Defenders, aes(x = goals_conceded, y = clean_sheets, color = name)) +
geom_point(size = 3) +
geom_smooth(method = "lm", se = FALSE, color = "black") +
labs(
title = "Relation entre clean sheets et goals concédés",
x = "Goals concédés",
y = "Clean sheets",
color = "Défenseur"
) +
theme_minimal()
cor_matrix <- cor(Defenders[, c("appearances", "blocks", "clean_sheets", "clearances_off_the_line", "goals",
"goals_conceded", "interceptions", "own_goal_scored", "performance_index_def")],
use = "complete.obs")
library(ggcorrplot)
ggcorrplot(cor_matrix, method = "circle", type = "lower", lab = TRUE, lab_size = 3, colors = c("red", "white", "blue"))
clustering_data <- Defenders %>%
select(performance_index_def, interceptions, blocks) %>%
scale()
# Clustering K-means
set.seed(123)
kmeans_result <- kmeans(clustering_data, centers = 3, nstart = 20)
Defenders$cluster <- as.factor(kmeans_result$cluster)
# Visualisation des clusters
ggplot(Defenders, aes(x = interceptions, y = blocks, color = cluster)) +
geom_point(size = 4) +
geom_text(aes(label = name), vjust = -1, size = 3) +
labs(
title = "Clustering des défenseurs en fonction des performances",
x = "Interceptions",
y = "Blocks",
color = "Cluster"
) +
theme_minimal()
top_5_defenders <- Defenders %>%
arrange(desc(performance_index_def)) %>%
head(5)
# Visualisation des 5 meilleurs défenseurs
ggplot(top_5_defenders, aes(x = reorder(name, -performance_index_def), y = performance_index_def, fill = name)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(
title = "Top 5 défenseurs par index de performance",
x = "Défenseur",
y = "Index de performance",
fill = "Défenseur"
) +
theme_minimal()
model <- lm(performance_index_def ~ appearances + blocks + clean_sheets + clearances_off_the_line + goals +
goals_conceded + own_goal_scored + interceptions, data = Defenders)
# Résumé du modèle
#summary(model)
Defenders$predicted_index <- predict(model, Defenders)
ggplot(Defenders, aes(x = performance_index_def, y = predicted_index, color = name)) +
geom_point(size = 3) +
geom_abline(slope = 1, intercept = 0, color = "red") +
labs(
title = "Comparaison entre l'index réel et prédit",
x = "Index réel",
y = "Index prédit",
color = "Défenseur"
) +
theme_minimal()
Defenders_long <- Defenders %>%
pivot_longer(cols = c(clean_sheets, goals_conceded), names_to = "metric", values_to = "value")
# Diagramme en barres empilées
ggplot(Defenders_long, aes(x = name, y = value, fill = metric)) +
geom_bar(stat = "identity", position = "stack") +
coord_flip() +
labs(
title = "Clean sheets vs Buts concédés par défenseur",
x = "Défenseur",
y = "Valeurs",
fill = "Métrique"
) +
theme_minimal()
Midfielders$performance_index_mid <-
Midfielders$appearances * 0.15 +
Midfielders$assists_intentional * 0.25 +
Midfielders$goal_assists * 0.3 +
Midfielders$goals * 0.28 +
Midfielders$key_passes_attempt_assists * 0.2+
Midfielders$interceptions *0.05
- Midfielders$duels_lost * 0.05 - Midfielders$unsuccessful_dribbles *0.05
- Midfielders$unsuccessful_short_passes * 0.1
ggplot(Midfielders, aes(x = reorder(name, -performance_index_mid), y = performance_index_mid, fill = name)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(
title = "Classement des défenseurs par index de performance",
x = "Midfielders",
y = "Index de performance",
fill = "Midfielders"
) +
theme_minimal()
Midfielders_long <- Midfielders %>%
pivot_longer(cols = c(goals, goal_assists), names_to = "metric", values_to = "value")
ggplot(Midfielders_long, aes(x = reorder(name, -value), y = value, fill = metric)) +
geom_bar(stat = "identity") +
geom_text(aes(label = value), position = position_stack(vjust = 0.5), size = 3) + # Ajouter les labels
coord_flip() +
labs(
title = "Contribution aux buts par milieu de terrain",
x = "Milieu de terrain",
y = "Nombre de contributions",
fill = "Type"
) +
theme_minimal()
cor_matrix <- cor(Midfielders[, c("appearances", "assists_intentional", "goal_assists", "goals",
"key_passes_attempt_assists", "performance_index_mid")])
library(ggcorrplot)
ggcorrplot(cor_matrix, method = "circle", type = "lower", lab = TRUE, lab_size = 3,
colors = c("red", "white", "blue")) +
labs(title = "Corrélations entre les métriques des milieux")
Midfielders_norm <- Midfielders %>%
mutate(across(c(goals, goal_assists, key_passes_attempt_assists), ~ . / max(.), .names = "norm_{.col}"))
# Boxplot pour les métriques normalisées
Midfielders_long <- Midfielders_norm %>%
pivot_longer(cols = starts_with("norm"), names_to = "metric", values_to = "value")
# Calculer un score total normalisé
# Diagramme en barres pour les scores totaux
ggplot(Midfielders_long, aes(x = metric, y = value, color = name, group = name)) +
geom_line() +
geom_point(size = 3) +
labs(
title = "Comparaison des performances individuelles",
x = "Métrique",
y = "Valeur normalisée",
color = "Milieu"
) +
theme_minimal()
clustering_data <- Midfielders %>%
select(goals, goal_assists, key_passes_attempt_assists, performance_index_mid) %>%
scale()
# K-means clustering
set.seed(123)
kmeans_result <- kmeans(clustering_data, centers = 3, nstart = 20)
Midfielders$cluster <- as.factor(kmeans_result$cluster)
# Visualiser les clusters
ggplot(Midfielders, aes(x = goals, y = performance_index_mid, color = cluster)) +
geom_point(size = 4) +
geom_text(aes(label = name), vjust = -1, size = 3) +
labs(
title = "Clustering des milieux en fonction des performances",
x = "Buts",
y = "Index de performance",
color = "Cluster"
) +
theme_minimal()
Forwards$shots_off_targets <- Forwards$total_shots - (  Forwards$shots_on_target_inc_goals)
Forwards$penalties_missed <- Forwards$penalties_taken - Forwards$penalty_goals
Forwards$performance_index_fw <-
Forwards$appearances * 0.1 +
Forwards$goal_assists * 0.25
+Forwards$successful_dribbles *0.1
+ Forwards$duels_won *0.02
+ Forwards$overruns * 0.08 +
Forwards$goals * 0.3 -
Forwards$penalties_missed * 0.2-
Forwards$shots_off_targets * 0.1 -
- Forwards$offsides *0.05 - Forwards$unsuccessful_dribbles *0.1
-Forwards$penalties_missed * 0.2
- Forwards$duels_lost * 0.02
library(ggplot2)
ggplot(Forwards, aes(x = reorder(name, -performance_index_fw), y = performance_index_fw, fill = name)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(
title = "Classement des attaquants par index de performance",
x = "Attaquant",
y = "Index de performance",
fill = "Attaquant"
) +
theme_minimal()
library(dplyr)
library(tidyr)
Forwards$metrics_contributions <- Forwards$goals * 0.3 + Forwards$goal_assists * 0.25
# Diagramme empilé
Forwards_long <- Forwards %>%  pivot_longer(cols = c(goals, goal_assists), names_to = "metric", values_to = "value")
ggplot(Forwards_long, aes(x = reorder(name, -metrics_contributions), y = value, fill = metric)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(
title = "Contributions des métriques principales à la performance",
x = "Attaquant",
y = "Contributions",
fill = "Métrique"
) +
theme_minimal()
# Préparer les données pour clustering
clustering_data <- Forwards %>%
select(goals, goal_assists, successful_dribbles, performance_index_fw) %>%
scale()
set.seed(123)
kmeans_result <- kmeans(clustering_data, centers = 3, nstart = 20)
Forwards$cluster <- as.factor(kmeans_result$cluster)
ggplot(Forwards, aes(x = goals, y = performance_index_fw, color = cluster)) +
geom_point(size = 4) +
geom_text(aes(label = name), vjust = -1, size = 3) +
labs(
title = "Clustering des attaquants en fonction des performances",
x = "Buts",
y = "Index de performance",
color = "Cluster"
) +
theme_minimal()
correlation_matrix <- cor(Forwards[, c(
"appearances", "goal_assists", "successful_dribbles", "duels_won",
"overruns", "goals",
"offsides", "unsuccessful_dribbles" , "performance_index_fw"
)])
ggcorrplot(
correlation_matrix,
method = "circle",
type = "lower",
lab = TRUE,
lab_size = 3,
colors = c("red", "white", "blue"),
outline.color = "black",
ggtheme = theme_minimal()
) +
labs(
title = "Corrélations des métriques des attaquants",
subtitle = "Inclut les métriques et l'index de performance",
) +
theme(
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
plot.subtitle = element_text(size = 12, hjust = 0.5),
plot.caption = element_text(size = 10, hjust = 1)
)
Forwards$total_contributions <- Forwards$goals + Forwards$goal_assists + Forwards$successful_dribbles
Forwards$contribution_percentage <- Forwards$total_contributions / sum(Forwards$total_contributions) * 100
ggplot(Forwards, aes(x = "", y = contribution_percentage, fill = name)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y") +
labs(
title = "Répartition des contributions offensives par attaquant",
x = "",
y = "Pourcentage",
fill = "Attaquant"
) +
theme_minimal()
metrics_long <- Forwards %>%
pivot_longer(cols = c(goals, goal_assists, successful_dribbles), names_to = "metric", values_to = "value")
ggplot(metrics_long, aes(x = metric, y = value, fill = metric)) +
geom_boxplot(alpha = 0.7) +
labs(
title = "Comparaison des distributions des métriques clés",
x = "Métriques",
y = "Valeur",
fill = "Métrique"
) +
theme_minimal()
ggplot(Forwards, aes(x = shots_on_target_inc_goals, y = shots_off_targets, color = performance_index_fw)) +
geom_point(size = 4, alpha = 0.7) +
scale_color_gradient(low = "green", high = "red") +
geom_smooth(method = "lm", se = FALSE, linetype = "dashed", color = "blue") +
labs(
title = "Efficacité des tirs : Cadrés vs Non Cadrés",
subtitle = "Relation entre les tirs et l'index de performance",
x = "Tirs cadrés",
y = "Tirs non cadrés",
color = "Performance Index"
) +
theme_minimal()
# Modèle de régression linéaire multiple pour comprendre l'impact des métriques
model_cov <- lm(performance_index_fw ~ goals + goal_assists + successful_dribbles + duels_won, data = Forwards)
# Résumé du modèle
summary(model_cov)
# Visualisation des contributions relatives des métriques
coefplot(model_cov, sort = "magnitude") +
labs(
title = "Impact des métriques sur l'index de performance",
x = "Métriques",
y = "Contributions (Coefficients)"
)
